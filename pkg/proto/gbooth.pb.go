// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gbooth.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImageRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageRequest) Reset()         { *m = ImageRequest{} }
func (m *ImageRequest) String() string { return proto.CompactTextString(m) }
func (*ImageRequest) ProtoMessage()    {}
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac730dea810b8175, []int{0}
}

func (m *ImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageRequest.Unmarshal(m, b)
}
func (m *ImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageRequest.Marshal(b, m, deterministic)
}
func (m *ImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRequest.Merge(m, src)
}
func (m *ImageRequest) XXX_Size() int {
	return xxx_messageInfo_ImageRequest.Size(m)
}
func (m *ImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRequest proto.InternalMessageInfo

type ImageResponse struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Format               string   `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageResponse) Reset()         { *m = ImageResponse{} }
func (m *ImageResponse) String() string { return proto.CompactTextString(m) }
func (*ImageResponse) ProtoMessage()    {}
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac730dea810b8175, []int{1}
}

func (m *ImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageResponse.Unmarshal(m, b)
}
func (m *ImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageResponse.Marshal(b, m, deterministic)
}
func (m *ImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageResponse.Merge(m, src)
}
func (m *ImageResponse) XXX_Size() int {
	return xxx_messageInfo_ImageResponse.Size(m)
}
func (m *ImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageResponse proto.InternalMessageInfo

func (m *ImageResponse) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageResponse) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func init() {
	proto.RegisterType((*ImageRequest)(nil), "proto.ImageRequest")
	proto.RegisterType((*ImageResponse)(nil), "proto.ImageResponse")
}

func init() { proto.RegisterFile("gbooth.proto", fileDescriptor_ac730dea810b8175) }

var fileDescriptor_ac730dea810b8175 = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4f, 0xca, 0xcf,
	0x2f, 0xc9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x7c, 0x5c, 0x3c,
	0x9e, 0xb9, 0x89, 0xe9, 0xa9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x4a, 0xb6, 0x5c, 0xbc,
	0x50, 0x7e, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08, 0x17, 0x6b, 0x26, 0x48, 0x40, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x27, 0x08, 0xc2, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0xcb, 0x2f, 0xca, 0x4d,
	0x2c, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x8c, 0xec, 0xb8, 0x58, 0x5c, 0x82,
	0x7d, 0x82, 0x84, 0xcc, 0xb8, 0xd8, 0x9d, 0x13, 0x0b, 0x4a, 0x4a, 0x8b, 0x52, 0x85, 0x84, 0x21,
	0x16, 0xea, 0x21, 0x5b, 0x23, 0x25, 0x82, 0x2a, 0x08, 0xb1, 0x4b, 0x89, 0x21, 0x89, 0x0d, 0x2c,
	0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x85, 0xf7, 0x69, 0x3c, 0xac, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DSLRClient is the client API for DSLR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSLRClient interface {
	Capture(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type dSLRClient struct {
	cc *grpc.ClientConn
}

func NewDSLRClient(cc *grpc.ClientConn) DSLRClient {
	return &dSLRClient{cc}
}

func (c *dSLRClient) Capture(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/proto.DSLR/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSLRServer is the server API for DSLR service.
type DSLRServer interface {
	Capture(context.Context, *ImageRequest) (*ImageResponse, error)
}

// UnimplementedDSLRServer can be embedded to have forward compatible implementations.
type UnimplementedDSLRServer struct {
}

func (*UnimplementedDSLRServer) Capture(ctx context.Context, req *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}

func RegisterDSLRServer(s *grpc.Server, srv DSLRServer) {
	s.RegisterService(&_DSLR_serviceDesc, srv)
}

func _DSLR_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSLRServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DSLR/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSLRServer).Capture(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSLR_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DSLR",
	HandlerType: (*DSLRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Capture",
			Handler:    _DSLR_Capture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gbooth.proto",
}
